"use strict";
/* Overview:
 * - use window.__typeDocPluginKatexOptions variable for the KaTeX options
 * - use https://cdn.jsdelivr.net/npm/katex/dist/... for not specified version
 * - use https://cdn.jsdelivr.net/npm/katex@x.y.z/dist/... if version is specified
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
const typedoc_1 = require("typedoc");
function load(app) {
    app.options.addDeclaration({
        name: "katex",
        help: "KaTeX plugin config",
        type: typedoc_1.ParameterType.Mixed,
        defaultValue: {},
    });
    //
    app.renderer.hooks.on("head.end", () => {
        var { version, options } = app.options.getValue("katex");
        // katex url
        var katexUrl = "https://cdn.jsdelivr.net/npm/katex";
        if (version)
            katexUrl += "@" + version;
        katexUrl += "/dist/";
        // stringify options
        if (!options)
            optionsStr = `${undefined}`;
        else
            var optionsStr = JSON.stringify(options);
        // additional head elements
        return typedoc_1.JSX.createElement(typedoc_1.JSX.Fragment, null,
            typedoc_1.JSX.createElement("link", { rel: "stylesheet", href: katexUrl + "katex.min.css" }),
            typedoc_1.JSX.createElement("script", { src: katexUrl + "katex.min.js" }),
            typedoc_1.JSX.createElement("script", { src: katexUrl + "contrib/auto-render.min.js" }),
            typedoc_1.JSX.createElement("script", null,
                typedoc_1.JSX.createElement(typedoc_1.JSX.Raw, { html: `
					window.__typeDocPluginKatexOptions=${optionsStr};
					window.addEventListener('load', () => window.renderMathInElement(document.body, window.__typeDocPluginKatexOptions));
				` })));
    });
}
exports.load = load;
;
